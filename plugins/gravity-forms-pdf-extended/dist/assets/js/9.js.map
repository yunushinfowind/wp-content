{"version":3,"sources":["webpack:///./node_modules/core-js/modules/_set-proto.js","webpack:///./node_modules/core-js/modules/es6.object.set-prototype-of.js","webpack:///./src/assets/js/react/components/Spinner.js","webpack:///./src/assets/js/react/components/CoreFonts/CoreFontListSpacer.js","webpack:///./src/assets/js/react/components/CoreFonts/CoreFontListResults.js","webpack:///./src/assets/js/react/components/CoreFonts/CoreFontButton.js","webpack:///./src/assets/js/react/components/CoreFonts/CoreFontCounter.js","webpack:///./src/assets/js/react/components/CoreFonts/CoreFontContainer.js","webpack:///./src/assets/js/react/router/coreFontRouter.js"],"names":["isObject","__webpack_require__","anObject","check","O","proto","TypeError","module","exports","set","Object","setPrototypeOf","test","buggy","Function","call","f","prototype","Array","e","__proto__","$export","S","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Spinner","a","createElement","alt","GFPDF","spinnerAlt","src","spinnerUrl","className","182","t","o","r","i","c","s","l","CoreFontListSpacer","react_default","p","Symbol","iterator","constructor","y","b","length","enumerable","configurable","writable","defineProperty","key","d","m","h","ReferenceError","F","getPrototypeOf","g","create","value","w","v","CoreFontListResults","React","Component","_this","this","console","props","lines","keys","reverse","retry","map","status","message","CoreFontListResults_Retry","history","retryText","CoreFonts_CoreFontListSpacer","PropTypes","object","array","string","Retry","preventDefault","_this2","replace","href","onClick","triggerRetryFontDownload","CoreFontButton","_ref","callback","text","disable","type","disabled","defaultProps","propTypes","func","bool","CoreFontCounter","queue","number","CoreFontContainer","_React$Component","_getPrototypeOf2","_len","arguments","args","_key","CoreFontContainer_defineProperty","CoreFontContainer_assertThisInitialized","CoreFontContainer_getPrototypeOf","apply","concat","ajax","location","fontList","error","startDownloadFonts","setState","files","clearButtonClickedAndRetryList","handleGithubApiError","clearConsole","setTimeout","file","downloadFontsApiCall","addToConsole","state","getFilesFromGitHub","R","nextProps","buttonClicked","pathname","triggerFontDownload","maybeStartDownload","getFilesFromGitHubFailed","requestDownload","clearRequestRemainingData","_this$props","buttonClassName","buttonText","counterText","consoleList","CoreFonts_CoreFontButton","CoreFonts_CoreFontCounter","CoreFontListResults_CoreFontListResults","q","githubError","connect","coreFonts","downloadCounter","Routes","button","HashRouter","Switch","Route","render","coreFontRouter_CoreFont","path","exact","CoreFont","_ref2","CoreFonts_CoreFontContainer","innerText","success","coreFontSuccess","coreFontError","itemPending","coreFontItemPendingMessage","itemSuccess","coreFontItemSuccessMessage","itemError","coreFontItemErrorMessage","coreFontCounter","coreFontRetry"],"mappings":"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","file":"chunk-9.dfe2f8a9448ab3fc6514.js","sourcesContent":["// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","import React from 'react'\n\n/**\n * @package     Gravity PDF\n * @copyright   Copyright (c) 2020, Blue Liquid Designs\n * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License\n * @since       5.0\n */\n\n/**\n * Display a loading spinner\n *\n * @since 5.0\n */\nconst Spinner = () => (\n  <img alt={GFPDF.spinnerAlt} src={GFPDF.spinnerUrl} className=\"gfpdf-spinner\"/>\n)\n\nexport default Spinner","import React from 'react'\n\n/**\n * @package     Gravity PDF\n * @copyright   Copyright (c) 2020, Blue Liquid Designs\n * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License\n * @since       5.0\n */\n\n/**\n * Display a spacer block\n *\n * @since 5.0\n */\nconst CoreFontListSpacer = () => (\n  <div className='gfpdf-core-font-spacer'>---</div>\n)\n\nexport default CoreFontListSpacer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ListSpacer from './CoreFontListSpacer'\n\n/**\n * @package     Gravity PDF\n * @copyright   Copyright (c) 2020, Blue Liquid Designs\n * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License\n * @since       5.0\n */\n\n/**\n * Displays the Console output for our Core Font Downloader\n *\n * @since 5.0\n */\nexport default class CoreFontListResults extends React.Component {\n\n  /**\n   *\n   * @since 5.0\n   */\n  static propTypes = {\n    console: PropTypes.object,\n    retry: PropTypes.array,\n    history: PropTypes.object,\n    retryText: PropTypes.string\n  }\n\n  /**\n   * @returns {*}\n   *\n   * @since 5.0\n   */\n  render () {\n    const console = this.props.console\n    const lines = Object.keys(console).reverse()\n    const retry = this.props.retry.length > 0\n\n    return (!lines.length) ? null : (\n      <div className=\"gfpdf-core-font-container\">\n        {lines.map((key) =>\n          <div key={key} className={'gfpdf-core-font-status-' + console[key].status}>\n            {console[key].message}\n            {' '}\n            {key === 'completed' && retry && <Retry history={this.props.history} retryText={this.props.retryText} />}\n            {key === 'completed' && <ListSpacer />}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\n/**\n * @since 5.0\n */\nclass Retry extends React.Component {\n\n  /**\n   *\n   * @since 5.0\n   */\n  static propTypes = {\n    history: PropTypes.object,\n    retryText: PropTypes.string\n  }\n\n  /**\n   * Update the navigation history when the retry link is selected\n   *\n   * @param e\n   *\n   * @since 5.0\n   */\n  triggerRetryFontDownload = (e) => {\n    e.preventDefault()\n    this.props.history.replace('retryDownloadCoreFonts')\n  }\n\n  /**\n   * Display a \"retry\" download link\n   *\n   * @returns {*}\n   *\n   * @since 5.0\n   */\n  render () {\n    return (\n      <a href=\"#\" onClick={this.triggerRetryFontDownload}>{this.props.retryText}</a>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/**\n * @package     Gravity PDF\n * @copyright   Copyright (c) 2020, Blue Liquid Designs\n * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License\n * @since       5.0\n */\n\n/**\n * Displays the button that initialises the Core Font download\n *\n * @param string className\n * @param func callback\n * @param string text\n * @param boolean disable\n *\n * @since 5.0\n */\nconst CoreFontButton = ({ className, callback, text, disable }) => (\n  <button className={className} type='button' onClick={callback} disabled={disable}>\n    {text}\n  </button>\n)\n\n/**\n *  @since 5.0\n */\nCoreFontButton.defaultProps = {\n  disable: false\n}\n\n/**\n *  @since 5.0\n */\nCoreFontButton.propTypes = {\n  className: PropTypes.string,\n  callback: PropTypes.func,\n  text: PropTypes.string,\n  disable: PropTypes.bool\n}\n\nexport default CoreFontButton\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/**\n * @package     Gravity PDF\n * @copyright   Copyright (c) 2020, Blue Liquid Designs\n * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License\n * @since       5.0\n */\n\n/**\n * Display an inline counter\n *\n * @param queue\n * @param text\n *\n * @since 5.0\n */\nconst CoreFontCounter = ({ queue, text }) => (\n  <span className='gfpdf-core-font-counter'>{text} {queue}</span>\n)\n\n/**\n *\n * @since 5.0\n */\nCoreFontCounter.propTypes = {\n  queue: PropTypes.number,\n  text: PropTypes.string\n}\n\nexport default CoreFontCounter\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport CoreFontListResults from './CoreFontListResults'\nimport Button from './CoreFontButton'\nimport Counter from './CoreFontCounter'\nimport Spinner from '../Spinner'\nimport {\n  clearButtonClickedAndRetryList,\n  addToConsole,\n  getFilesFromGitHub,\n  downloadFontsApiCall,\n  clearRequestRemainingData,\n  clearConsole\n} from '../../actions/coreFonts'\n\n/**\n * @package     Gravity PDF\n * @copyright   Copyright (c) 2020, Blue Liquid Designs\n * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License\n * @since       5.0\n */\n\n/**\n * Handles the grunt work for our Core Font downloader (API calls, display, state ect)\n *\n * @since 5.0\n */\nexport class CoreFontContainer extends React.Component {\n\n  /**\n   *\n   * @since 5.0\n   */\n  static propTypes = {\n    location: PropTypes.object,\n    requestDownload: PropTypes.string,\n    clearRequestRemainingData: PropTypes.func,\n    getFilesFromGitHub: PropTypes.func,\n    buttonClicked: PropTypes.bool,\n    fontList: PropTypes.array,\n    getFilesFromGitHubFailed: PropTypes.string,\n    retry: PropTypes.array,\n    clearConsole: PropTypes.func,\n    history: PropTypes.object,\n    clearButtonClickedAndRetryList: PropTypes.func,\n    downloadFontsApiCall: PropTypes.func,\n    githubError: PropTypes.string,\n    addToConsole: PropTypes.func,\n    console: PropTypes.object,\n    buttonClassName: PropTypes.string,\n    buttonText: PropTypes.string,\n    counterText: PropTypes.string,\n    retryText: PropTypes.string,\n    queue: PropTypes.number\n  }\n\n  /**\n   * Switches to show loaders\n   *\n   * @type {{ajax: boolean}}\n   *\n   * @since 5.0\n   */\n  state = {\n    ajax: false\n  }\n\n  /**\n   * When new props are received we'll check if the font list should be loaded\n   *\n   * @param nextProps\n   *\n   * @since 5.0\n   */\n  componentWillReceiveProps (nextProps) {\n    /* Load current font list */\n    if (nextProps.fontList.length > 0 && nextProps.buttonClicked) {\n      this.startDownloadFonts(nextProps.fontList)\n    }\n\n    /* Check for /downloadCoreFonts redirect URL and run the installer */\n    if (nextProps.location.pathname === '/downloadCoreFonts') {\n      this.triggerFontDownload()\n    }\n\n    /* Load current hash history location & retry font list */\n    if (nextProps.location.pathname === '/retryDownloadCoreFonts') {\n      this.maybeStartDownload(nextProps.location.pathname, nextProps.retry)\n    }\n\n    /* Load error if something went wrong */\n    if (nextProps.getFilesFromGitHubFailed !== '' && nextProps.buttonClicked) {\n      this.startDownloadFonts(nextProps.fontList, nextProps.getFilesFromGitHubFailed)\n    }\n\n    /* Set ajax/loading false if request download is finished */\n    if (nextProps.requestDownload === 'finished') {\n      this.setState({ ajax: false })\n      this.props.clearRequestRemainingData()\n      this.props.history.replace('')\n    }\n  }\n\n  /**\n   * Check for /downloadCoreFonts redirect URL and run the installer\n   *\n   * @since 5.0\n   */\n  componentDidMount () {\n    if (this.props.location.pathname === '/downloadCoreFonts') {\n      this.triggerFontDownload()\n    }\n  }\n\n  /**\n   * If the Hash History matches our keys (and not already loading) start the download\n   *\n   * @param location\n   * @param fontList\n   * @param error\n   *\n   * @since 5.0\n   */\n  maybeStartDownload = (location, fontList, error = null) => {\n    if (location === '/downloadCoreFonts') {\n      this.startDownloadFonts(fontList, error)\n    }\n\n    if (location === '/retryDownloadCoreFonts') {\n      this.setState({ ajax: true })\n      this.startDownloadFonts(fontList, error)\n    }\n  }\n\n  /**\n   * Call our server to download the fonts in batches of 5\n   *\n   * @param array files The font files to download (usually passed in from the 'retry' prop)\n   *\n   * @returns {files: Array}\n   *\n   * @since 5.0\n   */\n  startDownloadFonts = (files, error) => {\n    if (files.length === 0) {\n      this.props.clearButtonClickedAndRetryList()\n\n      return this.handleGithubApiError(error)\n    }\n\n    this.props.clearConsole()\n    this.props.clearButtonClickedAndRetryList()\n\n    /* Clean Hash History*/\n    this.props.history.replace('')\n\n    setTimeout(() => files.map((file) => this.props.downloadFontsApiCall(file)), 300)\n\n    return files\n  }\n\n  /**\n   * Add a GitHub API overall status to the console\n   *\n   * @param error\n   *\n   * @since 5.0\n   */\n  handleGithubApiError = (error) => {\n    this.setState({ ajax: false })\n    this.props.addToConsole('completed', 'error', error)\n    this.props.history.replace('')\n\n    return error\n  }\n\n  /**\n   * Request GitHub for font names & trigger font download\n   *\n   * @since 5.0\n   */\n  triggerFontDownload = () => {\n    if (this.state.ajax === false) {\n      /* Get the font names from GitHub we need to download */\n      this.setState({ ajax: true }, () => {\n        this.props.getFilesFromGitHub()\n      })\n    }\n  }\n\n  /**\n   * Renders our Core Font downloader UI\n   *\n   * @returns {XML}\n   *\n   * @since 5.0\n   */\n  render () {\n    const {\n      ajax\n    } = this.state\n\n    const {\n      fontList,\n      buttonClassName,\n      buttonText,\n      counterText,\n      queue,\n      history,\n      console: consoleList,\n      retry,\n      retryText\n    } = this.props\n\n    const disabled = queue < fontList.length && queue !== 0 || ajax\n\n    return (\n      <div>\n        <Button\n          className={buttonClassName}\n          callback={this.triggerFontDownload}\n          text={buttonText}\n          disable={disabled}\n        />\n        {ajax && <Spinner />}\n        {ajax && queue !== 0 && <Counter text={counterText} queue={queue} />}\n        <CoreFontListResults\n          history={history}\n          console={consoleList}\n          retry={retry}\n          retryText={retryText}\n        />\n      </div>\n    )\n  }\n}\n\n/**\n * Map Redux state to props\n *\n * @param state\n *\n * @returns {{\n *  buttonClicked: Boolean,\n *  fontList: Array,\n *  getFilesFromGitHubFailed: String,\n *  console: Object,\n *  retry: (*|number|Array),\n *  requestDownload: String,\n *  queue: boolean\n * }}\n *\n * @since 5.0\n */\nconst mapStateToProps = state => {\n  return {\n    buttonClicked: state.coreFonts.buttonClicked,\n    fontList: state.coreFonts.fontList,\n    getFilesFromGitHubFailed: state.coreFonts.getFilesFromGitHubFailed,\n    console: state.coreFonts.console,\n    retry: state.coreFonts.retry,\n    requestDownload: state.coreFonts.requestDownload,\n    queue: state.coreFonts.downloadCounter\n  }\n}\n\n/**\n * Map Redux actions to props\n *\n * @returns {{\n *  addToConsole,\n *  clearButtonClickedAndRetryList,\n *  getFilesFromGitHub,\n *  downloadFontsApiCall,\n *  clearRequestRemainingData,\n *  clearConsole\n * }}\n *\n * @since 5.0\n */\n\nexport default connect(mapStateToProps, {\n  addToConsole,\n  clearButtonClickedAndRetryList,\n  getFilesFromGitHub,\n  downloadFontsApiCall,\n  clearRequestRemainingData,\n  clearConsole\n})(CoreFontContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport CoreFontContainer from '../components/CoreFonts/CoreFontContainer'\n\n/**\n * @package     Gravity PDF\n * @copyright   Copyright (c) 2020, Blue Liquid Designs\n * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License\n * @since       5.0\n */\n\n/**\n * Contains the React Router Routes for our Core Font downloader.\n * We are using hashHistory instead of browserHistory so as not to affect the backend\n *\n * Routes include:\n *\n * /downloadCoreFonts\n * /retryDownloadCoreFonts\n *\n * @param button DOM Node containing the original static <button> markup (gets replaced by React)\n *\n * @since 5.0\n */\nconst Routes = ({ button }) => (\n  <Router>\n    <Switch>\n      <Route render={(props) => <CoreFont history={props.history} button={button} />} />\n\n      <Route\n        path='/downloadCoreFonts'\n        exact\n        render={(props) => <CoreFont history={props.history} button={button} />} />\n\n      <Route\n        path='/retryDownloadCoreFonts'\n        exact\n        render={(props) => <CoreFont history={props.history} button={button} />} />\n    </Switch>\n  </Router>\n)\n\n/**\n * @since 5.0\n */\nRoutes.propTypes = {\n  history: PropTypes.object,\n  button: PropTypes.object\n}\n\n/**\n * Because we used the same component multiple times above, the real component was abstracted\n *\n * @param history HashHistory object\n * @param button DOM Node\n *\n * @since 5.0\n */\nconst CoreFont = ({ history, button }) => (\n  <CoreFontContainer\n    history={history}\n    location={history.location}\n    buttonClassName={button.className}\n    buttonText={button.innerText}\n    success={GFPDF.coreFontSuccess}\n    error={GFPDF.coreFontError}\n    itemPending={GFPDF.coreFontItemPendingMessage}\n    itemSuccess={GFPDF.coreFontItemSuccessMessage}\n    itemError={GFPDF.coreFontItemErrorMessage}\n    counterText={GFPDF.coreFontCounter}\n    retryText={GFPDF.coreFontRetry}\n  />\n)\n\n/**\n * @since 5.0\n */\nCoreFont.propTypes = {\n  history: PropTypes.object,\n  button: PropTypes.object\n}\n\nexport default Routes\n"],"sourceRoot":""}